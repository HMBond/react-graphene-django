{"ast":null,"code":"var _jsxFileName = \"/Users/mikebond/Repos/python-graphene-tutorial/mysite/frontend/src/routes/Questions.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from 'urql';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuestionQuery = `\n  query {\n    allQuestions{\n      id\n      pubDate\n      questionText\n      choiceSet{\n        id\n        choiceText\n        votes\n      }\n    }\n  }\n`;\n\nconst Questions = ({\n  props\n}) => {\n  _s();\n\n  // eslint-disable-next-line\n  const [result, reexecuteQuery] = useQuery({\n    query: QuestionQuery\n  });\n  const {\n    data,\n    fetching,\n    error\n  } = result;\n  if (fetching) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Oh no... \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.allQuestions.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/question/${question.id}`,\n          children: question.questionText\n        }, question.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"ct3FlcZGh+a1CrbiqJ/T+fFQJXg=\", false, function () {\n  return [useQuery];\n});\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/Users/mikebond/Repos/python-graphene-tutorial/mysite/frontend/src/routes/Questions.js"],"names":["useQuery","Link","QuestionQuery","Questions","props","result","reexecuteQuery","query","data","fetching","error","message","allQuestions","map","question","id","questionText","JSON","stringify"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC/B;AACA,QAAM,CAACC,MAAD,EAASC,cAAT,IAA2BN,QAAQ,CAAC;AACxCO,IAAAA,KAAK,EAAEL;AADiC,GAAD,CAAzC;AAIA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAA4BL,MAAlC;AAEA,MAAII,QAAJ,EAAc,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACd,MAAIC,KAAJ,EAAW,oBAAO;AAAA,4BAAaA,KAAK,CAACC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,4BACE;AAAA,gBACGH,IAAI,CAACI,YAAL,CAAkBC,GAAlB,CAAuBC,QAAD,iBACrB;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,aAAYA,QAAQ,CAACC,EAAG,EAAnC;AAAA,oBACGD,QAAQ,CAACE;AADZ,WAA2CF,QAAQ,CAACC,EAApD;AAAA;AAAA;AAAA;AAAA;AADF,SAASD,QAAQ,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAA,gBAAME,IAAI,CAACC,SAAL,CAAeV,IAAf,EAAqB,IAArB,EAA2B,CAA3B;AAAN;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAcD,CAzBD;;GAAML,S;UAE6BH,Q;;;KAF7BG,S;AA2BN,eAAeA,SAAf","sourcesContent":["import { useQuery } from 'urql';\nimport { Link } from 'react-router-dom';\n\nconst QuestionQuery = `\n  query {\n    allQuestions{\n      id\n      pubDate\n      questionText\n      choiceSet{\n        id\n        choiceText\n        votes\n      }\n    }\n  }\n`;\n\nconst Questions = ({ props }) => {\n  // eslint-disable-next-line\n  const [result, reexecuteQuery] = useQuery({\n    query: QuestionQuery,\n  });\n\n  const { data, fetching, error } = result;\n\n  if (fetching) return <p>Loading...</p>;\n  if (error) return <p>Oh no... {error.message}</p>;\n\n  return (\n    <>\n      <ul>\n        {data.allQuestions.map((question) => (\n          <li key={question.id}>\n            <Link to={`/question/${question.id}`} key={question.id}>\n              {question.questionText}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </>\n  );\n};\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}