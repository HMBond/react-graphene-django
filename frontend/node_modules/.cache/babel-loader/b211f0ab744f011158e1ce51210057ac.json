{"ast":null,"code":"var _jsxFileName = \"/Users/mikebond/Repos/python-graphene-tutorial/mysite/frontend/src/Questions.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from 'urql';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionQuery = `\n  query {\n    allQuestions{\n      id\n      pubDate\n      questionText\n    }\n  }\n`;\n\nconst Questions = () => {\n  _s();\n\n  // eslint-disable-next-line\n  const [result, reexecuteQuery] = useQuery({\n    query: QuestionQuery\n  });\n  const {\n    data,\n    fetching,\n    error\n  } = result;\n  if (fetching) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Oh no... \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: JSON.stringify(data, null, 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this) // <ul>\n  //   {data.questions.map(todo => (\n  //     <li key={todo.id}>{todo.title}</li>\n  //   ))}\n  // </ul>\n  ;\n};\n\n_s(Questions, \"ct3FlcZGh+a1CrbiqJ/T+fFQJXg=\", false, function () {\n  return [useQuery];\n});\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/Users/mikebond/Repos/python-graphene-tutorial/mysite/frontend/src/Questions.js"],"names":["useQuery","QuestionQuery","Questions","result","reexecuteQuery","query","data","fetching","error","message","JSON","stringify"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,MAAzB;;AAEA,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB;AACA,QAAM,CAACC,MAAD,EAASC,cAAT,IAA2BJ,QAAQ,CAAC;AACxCK,IAAAA,KAAK,EAAEJ;AADiC,GAAD,CAAzC;AAIA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAA4BL,MAAlC;AAEA,MAAII,QAAJ,EAAc,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACd,MAAIC,KAAJ,EAAW,oBAAO;AAAA,4BAAaA,KAAK,CAACC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,cAAMC,IAAI,CAACC,SAAL,CAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B;AAAN;AAAA;AAAA;AAAA;AAAA,UADF,CAEE;AACA;AACA;AACA;AACA;AANF;AAQD,CAnBD;;GAAMJ,S;UAE6BF,Q;;;KAF7BE,S;AAqBN,eAAeA,SAAf","sourcesContent":["import { useQuery } from 'urql';\n\nconst QuestionQuery = `\n  query {\n    allQuestions{\n      id\n      pubDate\n      questionText\n    }\n  }\n`;\n\nconst Questions = () => {\n  // eslint-disable-next-line\n  const [result, reexecuteQuery] = useQuery({\n    query: QuestionQuery,\n  });\n\n  const { data, fetching, error } = result;\n\n  if (fetching) return <p>Loading...</p>;\n  if (error) return <p>Oh no... {error.message}</p>;\n\n  return (\n    <pre>{JSON.stringify(data, null, 2)}</pre>\n    // <ul>\n    //   {data.questions.map(todo => (\n    //     <li key={todo.id}>{todo.title}</li>\n    //   ))}\n    // </ul>\n  );\n};\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}